{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst datetimePicker = document.querySelector('#datetime-picker');\nconst startBtn = document.querySelector('[data-start]');\nconst daysSpan = document.querySelector('[data-days]');\nconst hoursSpan = document.querySelector('[data-hours]');\nconst minutesSpan = document.querySelector('[data-minutes]');\nconst secondsSpan = document.querySelector('[data-seconds]');\n\nlet userSelectedDate = null;\nlet timerId = null;\n\nstartBtn.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    const dateNow = new Date();\n\n    if (selectedDate <= dateNow) {\n      iziToast.error({\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n        timeout: 5000,\n      });\n      startBtn.disabled = true;\n      userSelectedDate = null;\n    } else {\n      userSelectedDate = selectedDate;\n      startBtn.disabled = false;\n    }\n  },\n};\n\nflatpickr(datetimePicker, options);\n\nstartBtn.addEventListener('click', () => {\n  if (!userSelectedDate) return;\n\n  startBtn.disabled = true;\n  datetimePicker.disabled = true;\n\n  timerId = setInterval(() => {\n    const dateNow = new Data();\n    const diffTime = userSelectedDate - dateNow;\n\n    if (diffTime <= 0) {\n      clearInterval(timerId);\n      updateTimer({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      return;\n    }\n    const time = convertMs(diffTime);\n    updateTimer(time);\n  }, 1500);\n});\n\nfunction updateTimerUI({ days, hours, minutes, seconds }) {\n  daysSpan.textContent = addLeadingZero(days);\n  hoursSpan.textContent = addLeadingZero(hours);\n  minutesSpan.textContent = addLeadingZero(minutes);\n  secondsSpan.textContent = addLeadingZero(seconds);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n"],"names":["datetimePicker","startBtn","userSelectedDate","timerId","options","selectedDates","selectedDate","iziToast","flatpickr","dateNow","diffTime","time","convertMs","ms","days","hours","minutes","seconds"],"mappings":"2GAMA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAW,SAAS,cAAc,cAAc,EACrC,SAAS,cAAc,aAAa,EACnC,SAAS,cAAc,cAAc,EACnC,SAAS,cAAc,gBAAgB,EACvC,SAAS,cAAc,gBAAgB,EAE3D,IAAIC,EAAmB,KACnBC,EAAU,KAEdF,EAAS,SAAW,GAEpB,MAAMG,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAGhCC,GAFY,IAAI,MAGlBC,EAAS,MAAM,CACb,QAAS,qCACT,SAAU,WACV,QAAS,GACjB,CAAO,EACDN,EAAS,SAAW,GACpBC,EAAmB,OAEnBA,EAAmBI,EACnBL,EAAS,SAAW,GAEvB,CACH,EAEAO,EAAUR,EAAgBI,CAAO,EAEjCH,EAAS,iBAAiB,QAAS,IAAM,CAClCC,IAELD,EAAS,SAAW,GACpBD,EAAe,SAAW,GAE1BG,EAAU,YAAY,IAAM,CAC1B,MAAMM,EAAU,IAAI,KACdC,EAAWR,EAAmBO,EAEpC,GAAIC,GAAY,EAAG,CACjB,cAAcP,CAAO,EACrB,YAAY,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAC,CAAE,EACzD,MACD,CACD,MAAMQ,EAAOC,EAAUF,CAAQ,EAC/B,YAAYC,CAAI,CACjB,EAAE,IAAI,EACT,CAAC,EASD,SAASC,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}